---
- name: Wait for ssh connection
  hosts: all
  gather_facts: False
  tasks: 
  - name: Ensure ssh port open
    ansible.builtin.wait_for:
      port: 22
      delay: 60
      timeout: 300
      search_regex: OpenSSH
      host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
    vars:
      ansible_connection: local

- name: Install postgresql
  hosts: all
  become: True
  become_user: root
  tasks:
  - name: "Find out if PostgreSQL is initialized"
    ansible.builtin.stat:
      path: "/var/lib/pgsql/data/pg_hba.conf"
    register: postgres_data
  - name: "Install postgres packages"
    ansible.builtin.apt: "name={{ item }} state=present"
    with_items:
      - python3-pip
      - postgresql
      - postgresql-contrib
      - postgresql-client
      - net-tools  
  - name: "Install Python packages"
    ansible.builtin.pip: "name={{ item }} executable=pip3 state=present"
    with_items:
      - psycopg2-binary
  - name: "Start and enable services"
    ansible.builtin.service: "name={{ item }} state=started enabled=yes"
    with_items:
      - postgresql
  - name: "Create app database"
    community.postgresql.postgresql_db:
      state: present
      name: gogs
    become: yes
    become_user: postgres
  - name: "Create db user"
    community.postgresql.postgresql_user:
      state: present
      name: gogs
      password: gogsP1ssw0rd
    become: yes
    become_user: postgres
  - name: "Grant db user access to app db"
    community.postgresql.postgresql_privs:
      type: database
      database: gogs
      roles: gogs
      grant_option: no
      privs: ALL
    become: yes
    become_user: postgres
  # - name: Add some dummy data to our database
  #   become: True
  #   become_user: postgres
  #   shell: psql {{ db_name }} < /tmp/dump.sql
  # - name: "Allow md5 connection for the db user"
  #   postgresql_pg_hba:
  #     dest: "~/data/pg_hba.conf"
  #     contype: host
  #     databases: all
  #     method: md5
  #     users: concourse
  #     create: true
  #   become: yes
  #   become_user: postgres
  #   notify: restart postgres
  # handlers:
  #   - name: restart postgres
  #     service: name=postgresql state=restarted

- name: Download and unpack gogs
  hosts: all
  become: True
  become_user: root
  tasks: 
  - name: Check folder stats
    ansible.builtin.stat:
      path: /opt/gogs
    register: stat_result  
  - name: Download binary
    ansible.builtin.get_url: 
      url: https://dl.gogs.io/0.12.4/gogs_0.12.4_linux_amd64.tar.gz
      dest: /opt/
    register: download_result  
    when: not stat_result.stat.exists 
  - name: Untar installer
    ansible.builtin.unarchive:
      src: "{{download_result.dest}}"
      dest: /opt/
      remote_src: True   
    when: not stat_result.stat.exists    
  - name: Find in folder
    ansible.builtin.find: 
      paths: /opt
      pattern: "gogs*"
      file_type: directory
    register: find_result
  - ansible.builtin.debug: msg={{ find_result }}
  - name: Rename folder
    ansible.builtin.shell: mv {{find_result.files[0].path}} /opt/gogs
    when: 
    - not (find_result.files[0].path == '/opt/gogs')


- name: Create systemd unit files
  hosts: all
  become: True
  become_user: root
  tasks:
  - name: Generate folders
    ansible.builtin.shell: |
      cp /opt/gogs/scripts/systemd/gogs.service /etc/systemd/system
  - name: Set dependent services
    ansible.builtin.lineinfile:
      path: /etc/systemd/system/gogs.service
      regexp: '^After=mariadb.service mysqld.service postgresql.service memcached.service redis.service'
      line: After=postgresql.service
  - name: Set working directory
    ansible.builtin.lineinfile:
      path: /etc/systemd/system/gogs.service
      regexp: '^WorkingDirectory=/home/git/gogs'
      line: WorkingDirectory=/opt/gogs
  - name: Set executable
    ansible.builtin.lineinfile:
      path: /etc/systemd/system/gogs.service
      regexp: '^ExecStart=/home/git/gogs/gogs web'
      line: ExecStart=/opt/gogs/gogs web --port 3000


- name: Create user to own folders
  hosts: all
  become: True
  become_user: root
  tasks:
  - name: Generate folders
    ansible.builtin.shell: |
      mkdir -p /var/log/gogs
  - name: Ensure group exists
    ansible.builtin.group: 
      name: git
      state: present
  - name: Create user
    ansible.builtin.user: 
      name: git
      group: git
  - name: Make user owner of folder
    ansible.builtin.file: 
      path: /var/log/gogs
      state: directory
      owner: git
      group: git
      recurse: yes    
  - name: Make user owner of folder - /opt/gogs
    ansible.builtin.file: 
      path: /opt/gogs
      state: directory
      owner: git
      group: git
      recurse: yes 
  - name: Make user owner of folder - /home/git
    ansible.builtin.file: 
      path: /home/git
      state: directory
      owner: git
      group: git
      recurse: yes

- name: Verify service running
  hosts: all
  become: True
  become_user: root
  tasks:
  - name: Start service
    ansible.builtin.shell: |
      systemctl daemon-reload
      systemctl start gogs
      systemctl enable gogs
      systemctl status gogs
      systemctl is-active gogs
    register: systemctl_result 
  - ansible.builtin.debug: msg={{ systemctl_result }}
  - name: Check with ps
    ansible.builtin.shell: ps aux | grep gogs
    register: app_status
  - ansible.builtin.debug: msg={{app_status.stdout_lines}}
  - name: Wait a minute
    ansible.builtin.pause:
      minutes: 0.5
  - name: Check with netstat
    ansible.builtin.shell: netstat -plnt
    register: app_status
  - ansible.builtin.debug: msg={{app_status.stdout_lines}}
  - name: Clean /etc/resolv.conf
    ansible.builtin.shell: |
      >/etc/resolv.conf
  - name: apply dns config
    ansible.builtin.blockinfile:
      path: /etc/resolv.conf
      block: |
        nameserver 192.168.1.250
